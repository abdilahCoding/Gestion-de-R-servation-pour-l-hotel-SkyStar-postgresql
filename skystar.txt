------------ création de la table clients-----------
 CREATE TABLE Clients(
        numPass VARCHAR(9) PRIMARY KEY, 
	nom VARCHAR(255) NOT NULL UNIQUE,
 	ville VARCHAR(255) NOT NULL
 );

------------ création de la table RESERVATIONS -----------
   CREATE TABLE Reservations(
         numR NUMERIC(11) PRIMARY KEY, 
  	 date_arrivée date NOT NULL,  
  	 date_départ date,
	 numPass VARCHAR(9),
	 numC NUMERIC(11),
	   	CONSTRAINT fk_reservation FOREIGN KEY(numPass) REFERENCES Clients(numPass) ON DELETE CASCADE ON UPDATE CASCADE,
		CONSTRAINT fk_chambres FOREIGN KEY(numC) REFERENCES Chambres(numC) ON DELETE CASCADE ON UPDATE CASCADE

  );
------------ création de la table CHAMBRES-----------
 CREATE TABLE Chambres(
         numC NUMERIC(11) PRIMARY KEY, 
         lits NUMERIC(11) NOT NULL DEFAULT 2,
         prix NUMERIC(11) NOT NULL
);

INSERT INTO public."RESERVATIONS"(
	"numR", "numPass", "numC", "départ")
	VALUES (0001250, 'B123', 125, '27-5-2021');
	
SELECT * FROM "Clients"
SELECT * FROM "CHAMBRES"
SELECT * FROM public."RESERVATIONS"

-- //First Function 
CREATE or replace FUNCTION chambresRéservées ()
RETURNS TABLE(numC int ,lits int,prix real) as $list$

BEGIN
    RETURN QUERY SELECT
     ch.*
    FROM
     "CHAMBRES" AS ch,"RESERVATIONS" AS r
     WHERE ch."numC"=r."numC" AND EXTRACT(MONTH FROM r."départ")=08
	 GROUP BY ch."numC";
END; 
$list$ LANGUAGE 'plpgsql';


-- Function 2

CREATE or replace FUNCTION ListClient ()
RETURNS TABLE(numPass int ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT
     cl.*
    FROM
     "CHAMBRES" AS ch,"RESERVATIONS" AS r,"Clients" AS cl
     WHERE ch."numC"=r."numC" AND r."numPass" = cl."numPass" AND ch."prix">700
	 GROUP BY cl."numPass";
END; 
$list$ LANGUAGE 'plpgsql';

-- 

-- Function 3

CREATE or replace FUNCTION chambresRéservéesParClient ()
RETURNS TABLE(numC int ,lits int,prix real) as $list$

BEGIN
    RETURN QUERY SELECT
     ch.*
    FROM
     "CHAMBRES" AS ch,"RESERVATIONS" AS r,"Clients" AS cl
     WHERE ch."numC"=r."numC" AND r."numPass" = cl."numPass" AND cl.nom Like'A%'
	 GROUP BY ch."numC";
END; 
$list$ LANGUAGE 'plpgsql';

-- 
-- 
-- FUNCTION 4
CREATE or replace FUNCTION clientsRéservées ()
RETURNS TABLE(numPass int ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT 
     cl.*
    FROM
     "CHAMBRES" AS ch, "RESERVATIONS" AS r,"Clients" AS cl
     WHERE ch."numC"= r."numC" AND r."numPass" = cl."numPass" 
	 GROUP BY cl."numPass"
	having count(ch."numC")>2;
END; 
$list$ LANGUAGE 'plpgsql';

-- 
-- 
-- 
-- FUNCTION 5
CREATE or replace FUNCTION clientsHabitent ()
RETURNS TABLE(numPass int ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT 
     cl.*
    FROM
     "CHAMBRES" AS ch, "RESERVATIONS" AS r,"Clients" AS cl
     WHERE ch."numC"= r."numC" AND r."numPass" = cl."numPass" AND cl."ville"='Casablanca' 
	 GROUP BY cl."numPass"
	having count(ch."numC")>2 AND count(r."numPass")>2 ;
END; 
$list$ LANGUAGE 'plpgsql';

-- 
-- 
-- PROCEDURE 6
create or replace procedure ModifierPrix()
language plpgsql    
as $update$
begin
    -- subtracting the amount from the sender's account 
    update "CHAMBRES" 
    set prix = 1000 
    where prix >= 700;
end;$update$


-- PROCEDURE 7
create or replace procedure supprimerClient()
language plpgsql    
as $delete$
begin
    -- subtracting the amount from the sender's account 
    delete from "Clients" WHERE "Clients"."numPass" Not in(select "numPass" FROM "RESERVATIONS" );
end;$delete$

-- 
-- 
-- Procedure 8

create or replace procedure ModifierPrixPourLits()
language plpgsql    
as $updatePrice$
begin
    -- subtracting the amount from the sender's account 
    update "CHAMBRES" 
    set prix = prix - 100
    where lits > 1;
end;$updatePrice$


CALL ModifierPrixPourLits()
CALL supprimerClient()
CALL ModifierPrix()

